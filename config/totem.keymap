//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#define HOST_OS 2


#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/totem.h"
#include "zmk-helpers/unicode-chars/russian.dtsi"
#include <behaviors.dtsi>

#define XXX &none
#define ___ &trans

#define BASE 0
#define RUS  1
#define NAV  2
#define DIG  3
#define SYS  4

#define QUICK_TAP_MS 175

&sk {  // sticky-key config
    release-after-ms = <900>;  // release after 0.9s
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

/*                                      38 KEY MATRIX / LAYOUT MAPPING

    ╭────────────────────┬────────────────────╮        ╭──────────────────────┬─────────────────────╮
    │  0   1   2   3   4 │  5   6   7   8   9 │        │  LT4 LT3 LT2 LT1 LT0 │ RT0 RT1 RT2 RT3 RT4 │
 ╭──╯ 10  11  12  13  14 │ 15  16  17  18  19 ╰───╮ ╭──╯  LM4 LM3 LM2 LM1 LM0 │ RM0 RM1 RM2 RM3 RM4 ╰───╮
 │ 20 21  22  23  24  25 │ 26  27  28  29  30  31 │ │ LB5 LB4 LB3 LB2 LB1 LB0 │ RB0 RB1 RB2 RB3 RB4 RB5 │
 ╰──────────╮ 32  33  34 │ 35  36  37 ╭───────────╯ ╰──────────╮  LH2 LH1 LH0 │ RH0 RH1 RH2 ╭───────────╯
            ╰────────────┴────────────╯                        ╰──────────────┴─────────────╯
*/

/* Timeless homerow mods */
// https://github.com/urob/zmk-config/tree/main#timeless-homerow-mods

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4 LB5  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4 RB5  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2 // thumb cluster for both hands

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_HOLD_TAP(NAME, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )

MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs
MAKE_HRM(hml_layer, &mo, &kp, KEYS_R THUMBS) // switch layer like HRM

// left russian home row
//MAKE_HRM(hml_ctrl, &kp, &ru_f, KEYS_R THUMBS)
MAKE_HRM(hml_ctrl, &lm, &ru_f, KEYS_R THUMBS)
MAKE_HRM(hml_opt, &kp, &ru_bi, KEYS_R THUMBS)
MAKE_HRM(hml_shift, &kp, &ru_v, KEYS_R THUMBS)
MAKE_HRM(hml_layer_ru, &mo, &ru_a, KEYS_R THUMBS)


// right russian home row
MAKE_HRM(hmr_ctrl, &kp, &ru_zh, KEYS_L THUMBS)
MAKE_HRM(hmr_opt, &kp, &ru_d, KEYS_L THUMBS)
MAKE_HRM(hmr_shift, &kp, &ru_l, KEYS_L THUMBS)
MAKE_HRM(hmr_cmd, &lm, &ru_o, KEYS_L THUMBS)


&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

/ {
        combos {
        compatible = "zmk,combos";
        caps_lock {
            bindings = <&caps_word>;
            key-positions = <LM3 LM2 LM1>;
            timeout-ms = <100>;
            require-prior-idle-ms = <150>;
        };
    };

    macros {
        /**
         * Temporarily switches to a layer (`&mo`) while a modifier is held.
         * Analogous to QMK's `LM()`, using a parameterized macro.
         *
         * Params:
         *  1. Layer to switch to
         *  2. Modifier to press while layer is active
         *
         * Example:
         *  `&lm NUM_LAYER LSHIFT`
         */
        lm: lm {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_press>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_2to1>,
                <&macro_release>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };

        press_two_keys: press_two_keys {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER>;
        };

        more_or_equal: more_or_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "MORE_OR_EQUAL";
        };

        less_or_equal: less_or_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp EQUAL>;
            label = "LESS_OR_EQUAL";
        };

        fun_arrow_right: fun_arrow_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "FUN_ARROW_RIGHT";
        };

        comment: comment {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp FSLH &kp STAR>;
            label = "MACROS_COMMENT";
        };
    };

    behaviors {

        comment_or: comment_or {
            compatible = "zmk,behavior-hold-tap";
            label = "slash_or_comm";
            bindings = <&comment>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        ru_sh_or_shch: ru_sh_or_shch {
            compatible = "zmk,behavior-hold-tap";
            label = "RU_SH_OR_SHCH";
            bindings = <&ru_shch>, <&ru_sh>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        ru_b_or: ru_b_or {
            compatible = "zmk,behavior-hold-tap";
            label = "RU_B_OR_COMA";
            bindings = <&kp>, <&ru_b>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        ru_yu_or: ru_yu_or {
            compatible = "zmk,behavior-hold-tap";
            label = "RU_YU_OR_DOT";
            bindings = <&kp>, <&ru_yu>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        ru_kh_or_e: ru_kh_or_e {
            compatible = "zmk,behavior-hold-tap";
            label = "RU_KH_OR_E";
            bindings = <&ru_e>, <&ru_kh>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        all_quotes: all_quotes {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mt GRAVE SQT>, <&kp DOUBLE_QUOTES>;
        };

    };

    keymap {
        compatible = "zmk,keymap";

        Norman {
            label = "BASE";
            bindings = <
//          ╭──────────────┬─────────────┬───────────────┬─────────────────┬─────────────╮        ╭─────────────┬──────────────────┬──────────────┬──────────────────┬──────────────────────╮
              &kp Q          &kp W         &lt DIG D       &kp F             &kp K                  &kp J         &kp U              &lt DIG R      &kp L              &mt COLON SEMICOLON
//          ├──────────────┼─────────────┼───────────────┼─────────────────┼─────────────┤        ├─────────────┼──────────────────┼──────────────┼──────────────────┼──────────────────────┤
              &hml LCTRL A   &hml LALT S   &hml LSHFT E    &hml_layer NAV T  &kp G                  &kp Y         &hmr RIGHT_GUI N   &hmr RSHFT I   &hmr RIGHT_ALT O   &hmr RIGHT_CONTROL H
// ╭────────┼──────────────┼─────────────┼───────────────┼─────────────────┼─────────────┤        ├─────────────┼──────────────────┼──────────────┼──────────────────┼──────────────────────┼─────────────────────────────────╮
     &kp TAB  &kp Z          &kp X         &kp C           &kp V             &kp B                  &kp P         &kp M              &kp COMMA      &kp DOT            &comment_or 0 SLASH    &all_quotes
// ╰────────┴──────────────┴─────────────┼───────────────┼─────────────────┼─────────────┤        ├─────────────┼──────────────────┼──────────────┼──────────────────┴──────────────────────┴─────────────────────────────────╯
                                           &sk LEFT_SHIFT  &sk LEFT_COMMAND  &kp SPACE              &kp RET       &lt SYS ESC        &mo DIG
//                                       ╰───────────────┴─────────────────┴─────────────╯        ╰─────────────┴──────────────────┴──────────────╯
            >;
        };


        Navigation {
            label = "Navigation";
            bindings = <
//          ╭──────────────┬───────────────────────┬──────────────────────┬───────────────────┬─────────────╮        ╭─────────────┬──────────────────┬──────────────┬──────────────────┬──────────────────────╮
              ___            &kp LS(LG(NUMBER_3))    &kp LS(LG(NUMBER_4))   ___                 ___                    &none         &kp HOME           &kp UP         &kp END            &kt PAGE_UP
//          ├──────────────┼───────────────────────┼──────────────────────┼───────────────────┼─────────────┤        ├─────────────┼──────────────────┼──────────────┼──────────────────┼──────────────────────┤
              ___            ___                     ___                    ___                 ___                    &kp LA(LEFT)  &kp LEFT           &kp DOWN       &kp RIGHT          &kp LA(RIGHT)
// ╭────────┼──────────────┼───────────────────────┼──────────────────────┼───────────────────┼─────────────┤        ├─────────────┼──────────────────┼──────────────┼──────────────────┼──────────────────────┼──────────────────╮
     ___      ___            ___                     ___                    ___                 ___                    &none         &kp LA(LEFT)       &none          &kp LA(RIGHT)      &kt PAGE_DOWN          ___
// ╰────────┴──────────────┴───────────────────────┼──────────────────────┼───────────────────┼─────────────┤        ├─────────────┼──────────────────┼──────────────┼──────────────────┴──────────────────────┴──────────────────╯
                                                     ___                    ___                 ___                    ___           ___                ___
//                                                 ╰──────────────────────┴───────────────────┴─────────────╯        ╰─────────────┴──────────────────┴──────────────╯
            >;
        };


        digits {
            label = "Digits";
            bindings = <
//          ╭────────────────────────┬──────────────────────┬────────────────────────────┬──────────────────────────────┬────────────────────────────────────╮        ╭────────────────┬──────────────────┬──────────────┬──────────────────┬──────────────────────╮
              &kp PIPE                 &kp DOLLAR             &kp LEFT_BRACE               &kp RIGHT_BRACE                &more_or_equal                                 &kp PLUS         &kp N7             &kp N8         &kp N9             &kp SEMICOLON
//          ├────────────────────────┼──────────────────────┼────────────────────────────┼──────────────────────────────┼────────────────────────────────────┤        ├────────────────┼──────────────────┼──────────────┼──────────────────┼──────────────────────┤
              &hml LCTRL EXCLAMATION  &hml LEFT_ALT AT_SIGN   &hml LSHFT LEFT_PARENTHESIS  &lt NAV RIGHT_PARENTHESIS      &fun_arrow_right                               &kp EQUAL        &kp N4             &kp N5         &kp N6             &kp KP_MULTIPLY
// ╭────────┼────────────────────────┼──────────────────────┼────────────────────────────┼──────────────────────────────┼────────────────────────────────────┤        ├────────────────┼──────────────────┼──────────────┼──────────────────┼──────────────────────┼──────────────────╮
    ___       &kp AMPERSAND           &kp LCTRL              &mt LESS_THAN LEFT_BRACKET   &mt GREATER_THAN RIGHT_BRACKET  &less_or_equal                                 &mt UNDER MINUS  &kp N1             &kp N2         &kp N3             &kp PERIOD             &kp SLASH
// ╰────────┴────────────────────────┴──────────────────────┼────────────────────────────┼──────────────────────────────┼────────────────────────────────────┤        ├────────────────┼──────────────────┼──────────────┼──────────────────┴──────────────────────┴──────────────────╯
                                                              ___                            ___                          ___                                            ___             &kp N0             ___
//                                                          ╰────────────────────────────┴──────────────────────────────┴────────────────────────────────────╯        ╰────────────────┴──────────────────┴──────────────╯
            >;
        };

        sim_layer {
            label = "SYSTEM";
            bindings = <
//            ╭─────────┬─────────┬──────────────┬────────────┬─────────────╮        ╭─────────────┬──────────────┬────────────┬────────────┬──────────╮
                &kp F1    &kp F2    &kp F3         &kp F4       &kp F5                 &kp F6        &kp F7         &kp F8       &kp F9       &kp F10
//            ├─────────┼─────────┼──────────────┼────────────┼─────────────┤        ├─────────────┼──────────────┼────────────┼────────────┼──────────┤
               ___        ___       ___            ___          ___                    &kp C_MUTE    &kp C_PP       ___          ___          ___
// ╭──────────┼─────────┼─────────┼──────────────┼────────────┼─────────────┤        ├─────────────┼──────────────┼────────────┼────────────┼──────────┼──────────╮
    &bt BT_CLR  ___      ___        &out OUT_TOG   &bt BT_PRV   &bt BT_NXT             &kp C_VOL_DN  &kp C_VOL_UP   &kp C_PREV   &kp C_NEXT   ___       ___
// ╰──────────┴─────────┴─────────┼──────────────┼────────────┼─────────────┤        ├─────────────┼──────────────┼────────────┼────────────┴──────────┴──────────╯
                                    ___            ___          ___                    ___           ___             ___
//                                ╰──────────────┴────────────┴─────────────╯        ╰─────────────┴──────────────┴────────────╯
            >;
        };
    };
};
